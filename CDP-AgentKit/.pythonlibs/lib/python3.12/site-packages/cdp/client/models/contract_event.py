# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ContractEvent(BaseModel):
    """
    Represents a single decoded event emitted by a smart contract
    """ # noqa: E501
    network_id: StrictStr = Field(description="The name of the blockchain network")
    protocol_name: StrictStr = Field(description="The name of the blockchain project or protocol")
    contract_name: StrictStr = Field(description="The name of the specific contract within the project")
    event_name: StrictStr = Field(description="The name of the event emitted by the contract")
    sig: StrictStr = Field(description="The signature of the event, including parameter types")
    four_bytes: StrictStr = Field(description="The first four bytes of the Keccak hash of the event signature")
    contract_address: StrictStr = Field(description="The EVM address of the smart contract")
    block_time: datetime = Field(description="The timestamp of the block in which the event was emitted")
    block_height: StrictInt = Field(description="The block number in which the event was emitted")
    tx_hash: StrictStr = Field(description="The transaction hash in which the event was emitted")
    tx_index: StrictInt = Field(description="The index of the transaction within the block")
    event_index: StrictInt = Field(description="The index of the event within the transaction")
    data: StrictStr = Field(description="The event data in a stringified format")
    __properties: ClassVar[List[str]] = ["network_id", "protocol_name", "contract_name", "event_name", "sig", "four_bytes", "contract_address", "block_time", "block_height", "tx_hash", "tx_index", "event_index", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContractEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContractEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "network_id": obj.get("network_id"),
            "protocol_name": obj.get("protocol_name"),
            "contract_name": obj.get("contract_name"),
            "event_name": obj.get("event_name"),
            "sig": obj.get("sig"),
            "four_bytes": obj.get("four_bytes"),
            "contract_address": obj.get("contract_address"),
            "block_time": obj.get("block_time"),
            "block_height": obj.get("block_height"),
            "tx_hash": obj.get("tx_hash"),
            "tx_index": obj.get("tx_index"),
            "event_index": obj.get("event_index"),
            "data": obj.get("data")
        })
        return _obj



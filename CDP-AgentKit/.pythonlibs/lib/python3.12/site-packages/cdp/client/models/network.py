# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cdp.client.models.asset import Asset
from cdp.client.models.feature_set import FeatureSet
from cdp.client.models.network_identifier import NetworkIdentifier
from typing import Optional, Set
from typing_extensions import Self

class Network(BaseModel):
    """
    Network
    """ # noqa: E501
    id: NetworkIdentifier
    display_name: StrictStr = Field(description="The human-readable name of the blockchain network")
    chain_id: StrictInt = Field(description="The chain ID of the blockchain network")
    protocol_family: StrictStr = Field(description="The protocol family of the blockchain network")
    is_testnet: StrictBool = Field(description="Whether the network is a testnet or not")
    native_asset: Asset
    feature_set: FeatureSet
    address_path_prefix: Optional[StrictStr] = Field(default=None, description="The BIP44 path prefix for the network")
    __properties: ClassVar[List[str]] = ["id", "display_name", "chain_id", "protocol_family", "is_testnet", "native_asset", "feature_set", "address_path_prefix"]

    @field_validator('protocol_family')
    def protocol_family_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['evm', 'solana']):
            raise ValueError("must be one of enum values ('evm', 'solana')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Network from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of native_asset
        if self.native_asset:
            _dict['native_asset'] = self.native_asset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature_set
        if self.feature_set:
            _dict['feature_set'] = self.feature_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Network from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "display_name": obj.get("display_name"),
            "chain_id": obj.get("chain_id"),
            "protocol_family": obj.get("protocol_family"),
            "is_testnet": obj.get("is_testnet"),
            "native_asset": Asset.from_dict(obj["native_asset"]) if obj.get("native_asset") is not None else None,
            "feature_set": FeatureSet.from_dict(obj["feature_set"]) if obj.get("feature_set") is not None else None,
            "address_path_prefix": obj.get("address_path_prefix")
        })
        return _obj



# coding: utf-8

"""
    Coinbase Platform API

    This is the OpenAPI 3.0 specification for the Coinbase Platform APIs, used in conjunction with the Coinbase Platform SDKs.

    The version of the OpenAPI document: 0.0.1-alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from cdp.client.models.address import Address
from cdp.client.models.feature_set import FeatureSet
from typing import Optional, Set
from typing_extensions import Self

class Wallet(BaseModel):
    """
    Wallet
    """ # noqa: E501
    id: StrictStr = Field(description="The server-assigned ID for the wallet.")
    network_id: StrictStr = Field(description="The ID of the blockchain network")
    default_address: Optional[Address] = None
    feature_set: FeatureSet
    server_signer_status: Optional[StrictStr] = Field(default=None, description="The status of the Server-Signer for the wallet if present.")
    __properties: ClassVar[List[str]] = ["id", "network_id", "default_address", "feature_set", "server_signer_status"]

    @field_validator('server_signer_status')
    def server_signer_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pending_seed_creation', 'active_seed']):
            raise ValueError("must be one of enum values ('pending_seed_creation', 'active_seed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Wallet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_address
        if self.default_address:
            _dict['default_address'] = self.default_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature_set
        if self.feature_set:
            _dict['feature_set'] = self.feature_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Wallet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "network_id": obj.get("network_id"),
            "default_address": Address.from_dict(obj["default_address"]) if obj.get("default_address") is not None else None,
            "feature_set": FeatureSet.from_dict(obj["feature_set"]) if obj.get("feature_set") is not None else None,
            "server_signer_status": obj.get("server_signer_status")
        })
        return _obj


